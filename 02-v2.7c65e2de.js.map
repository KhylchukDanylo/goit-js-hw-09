{"mappings":"gfAAAA,EAAA,aAGMC,EAAYC,SAASC,cAAc,oBACnCC,EAAgBF,SAASC,cAAc,sBACvCE,EAAWH,SAASC,cAAc,eAClCG,EAAYJ,SAASC,cAAc,gBACnCI,EAAcL,SAASC,cAAc,kBACrCK,EAAcN,SAASC,cAAc,kBAmF3C,SAASM,EAAWC,GAClB,IAAMC,EAAUD,EAAQE,MAAM,KAC9B,OAAOC,OAAOF,EAAQG,KAAK,KAE7B,SAASC,IACP,IAbMC,EACAC,EACAC,EAEAC,EASAC,EAAkBX,EAAWR,EAAUoB,OACvCC,EAAgBb,GAdhBO,EAAO,IAAIO,KACXN,EAAcD,EAAKC,cACnBC,EAAWF,EAAKE,WAAa,EAE7BC,EADUK,OAAOR,EAAKN,WACFe,SAAS,EAAG,KAC/B,GAAkBC,OAAfT,EAAY,KAAeS,OAAZR,EAAS,KAAaQ,OAAVP,KAcrC,OAHIC,GAAmBE,GACrBK,OAAOC,MAAM,sCAERR,EAAkBE,EA7FTpB,SAAS2B,iBAAiB,UAElCC,SAAQ,SAAAC,GAChBA,EAAQC,YAAcD,EAAQC,YAAYC,iB,UAI5CC,CAAUjC,EAAW,IAErBA,EAAUkC,iBAAiB,SAI3B,SAAiBC,GACfhC,EAAciC,aAAa,YAAY,GACvCC,QAAQC,MACJxB,IAAsB,GACxBX,EAAcoC,gBAAgB,eAPlCpC,EAAc+B,iBAAiB,SAW/B,SAA2BM,GACzBrC,EAAciC,aAAa,YAAY,GACvC,IAAMK,EAAaC,aAAY,WAS7B,IAwBeC,EACXC,EACAC,EACAC,EACAC,EAEAC,EAEAC,EAEAC,EAEAC,EAhBeC,GA5BnBf,QAAQC,MACHnC,EAAckD,aAAa,aAGG,IAAxBvC,IAiBf,SAAiBwC,GACflD,EAAS2B,YAAcuB,EAASN,KAChC3C,EAAU0B,YAAcuB,EAASL,MACjC3C,EAAYyB,YAAcuB,EAASJ,QACnC3C,EAAYwB,YAAcuB,EAASH,QAhBjCI,CAIJ,SAAcH,GAKZ,OAJAA,EAAOJ,KAAOzB,OAAO6B,EAAOJ,MAAMxB,SAAS,EAAG,KAC9C4B,EAAOH,MAAQ1B,OAAO6B,EAAOH,OAAOzB,SAAS,EAAG,KAChD4B,EAAOF,QAAU3B,OAAO6B,EAAOF,SAAS1B,SAAS,EAAG,KACpD4B,EAAOD,QAAU5B,OAAO6B,EAAOD,SAAS3B,SAAS,EAAG,KAC7C4B,EAVYI,EAoBEJ,EApB2BpD,EAAUoB,MAwBzCuB,EAHTc,SAAW,IAAInC,KAAK8B,GAAU,IAAI9B,KAOpCyB,EAAa,IADbD,EAAgB,IADhBD,EAAkB,IADlBD,EAAS,OAKTI,EAAOU,KAAKC,MAAMhB,EAAKI,GAEvBE,EAAQS,KAAKC,MAAMhB,EAAMI,EAAOD,GAEhCI,EAAUQ,KAAKC,MAAMhB,EAAOI,EAAOD,EAAQD,GAE3CM,EAAUO,KAAKC,MAAMhB,EAAQI,EAAOD,EAAQD,EAAUD,GAErD,CAAEI,OAAMC,QAAOC,UAASC,cAzC3BS,cAAcnB,GAHdmB,cAAcnB,KAQf,QAvBLtC,EAAciC,aAAa,YAAY,G","sources":["src/js/02-v2.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nconst inputData = document.querySelector('#datetime-picker');\nconst btnStartTimer = document.querySelector('button[data-start]');\nconst dateDays = document.querySelector('[data-days]');\nconst dataHours = document.querySelector('[data-hours]');\nconst dataMinutes = document.querySelector('[data-minutes]');\nconst dataSeconds = document.querySelector('[data-seconds]');\nconst textLabel = document.querySelectorAll('.label');\n\ntextLabel.forEach(element => {\n  element.textContent = element.textContent.toUpperCase();\n});\n\nconst flatpickr = require('flatpickr');\nflatpickr(inputData, {});\n\ninputData.addEventListener('input', onInput);\nbtnStartTimer.addEventListener('click', onClickStartTimer);\nbtnStartTimer.setAttribute('disabled', true);\n\nfunction onInput(e) {\n  btnStartTimer.setAttribute('disabled', true);\n  console.log();\n  if (comparisonDateNum() > 0) {\n    btnStartTimer.removeAttribute('disabled');\n  }\n}\n\nfunction onClickStartTimer(ev) {\n  btnStartTimer.setAttribute('disabled', true);\n  const intervalId = setInterval(() => {\n    console.log();\n    if (!btnStartTimer.hasAttribute('disabled')) {\n      clearInterval(intervalId);\n      return;\n    } else if (comparisonDateNum() === 0) {\n      clearInterval(intervalId);\n      return;\n    }\n    const dateUser = name(convertMs(dateInputInMs(inputData.value)));\n    setDate(dateUser);\n  }, 1000);\n}\n\nfunction name(params) {\n  params.days = String(params.days).padStart(2, '0');\n  params.hours = String(params.hours).padStart(2, '0');\n  params.minutes = String(params.minutes).padStart(2, '0');\n  params.seconds = String(params.seconds).padStart(2, '0');\n  return params;\n}\n\nfunction setDate(dateUser) {\n  dateDays.textContent = dateUser.days;\n  dataHours.textContent = dateUser.hours;\n  dataMinutes.textContent = dateUser.minutes;\n  dataSeconds.textContent = dateUser.seconds;\n}\n\nfunction dateInputInMs(params) {\n  return (mSeconds = new Date(params) - new Date());\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n\n  const hours = Math.floor((ms % day) / hour);\n\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction newDateToDay() {\n  const date = new Date();\n  const getFullYear = date.getFullYear();\n  const getMonth = date.getMonth() + 1;\n  const getDate = String(date.getDate());\n  const toGetDate = getDate.padStart(2, '0');\n  return `${getFullYear}-${getMonth}-${toGetDate}`;\n}\n\nfunction numberDate(getDate) {\n  const dateNum = getDate.split('-');\n  return Number(dateNum.join(''));\n}\nfunction comparisonDateNum() {\n  const numberDateInput = numberDate(inputData.value);\n  const numberNewDate = numberDate(newDateToDay());\n  //   console.log(numberDateInput, numberNewDate);\n  if (numberDateInput <= numberNewDate) {\n    window.alert('Please choose a date in the future');\n  }\n  return numberDateInput - numberNewDate;\n}\n"],"names":["parcelRequire","$47aee110a86b4d70$var$inputData","document","querySelector","$47aee110a86b4d70$var$btnStartTimer","$47aee110a86b4d70$var$dateDays","$47aee110a86b4d70$var$dataHours","$47aee110a86b4d70$var$dataMinutes","$47aee110a86b4d70$var$dataSeconds","$47aee110a86b4d70$var$numberDate","getDate","dateNum","split","Number","join","$47aee110a86b4d70$var$comparisonDateNum","date","getFullYear","getMonth","toGetDate","numberDateInput","value","numberNewDate","Date","String","padStart","concat","window","alert","querySelectorAll","forEach","element","textContent","toUpperCase","$dbdyf","addEventListener","e","setAttribute","console","log","removeAttribute","ev","intervalId","setInterval","ms","second","minute","hour","day","days","hours","minutes","seconds","params","hasAttribute","dateUser","$47aee110a86b4d70$var$setDate","$47aee110a86b4d70$var$name","mSeconds","Math","floor","clearInterval"],"version":3,"file":"02-v2.7c65e2de.js.map"}